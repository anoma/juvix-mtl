module Mtl.Data.ReaderT;

import Stdlib.Prelude open;
import Mtl.Trait.MonadTransformer open;
import Mtl.Trait.MonadTransformer open using {
  module MonadTransformer as MMonadTransformer;
};

type ReaderT (S : Type) (M : Type → Type) (A : Type) :=
  mkReaderT@{
    runReaderT : S → M A;
  };

runReader {S A : Type} {M : Type → Type} (r : S) (m : ReaderT S M A) : M A :=
  ReaderT.runReaderT m r;

instance
ReaderT-Functor
  {S : Type} {M : Type → Type} {{Functor M}} : Functor (ReaderT S M) :=
  mkFunctor@{
    map {A B : Type} (f : A → B) : ReaderT S M A → ReaderT S M B
      | (mkReaderT g) := mkReaderT λ{s := Functor.map λ{a := f a} (g s)};
  };

instance
ReaderT-Applicative
  {S : Type}
  {M : Type → Type}
  {{func : Applicative M}}
  : Applicative (ReaderT S M) :=
  mkApplicative@{
    pure {A} (a : A) : ReaderT S M A := mkReaderT \{s := Applicative.pure a};
    ap {A B} : ReaderT S M (A -> B) -> ReaderT S M A -> ReaderT S M B
      | (mkReaderT mf) (mkReaderT ma) :=
        mkReaderT \{s := Applicative.ap (mf s) (ma s)};
  };

instance
ReaderT-Monad
  {S : Type} {M : Type → Type} {{mon : Monad M}} : Monad (ReaderT S M) :=
  mkMonad@{
    applicative := ReaderT-Applicative;
    bind
      {A B : Type}
      (x : ReaderT S M A)
      (f : A → ReaderT S M B)
      : ReaderT S M B :=
      mkReaderT
        λ{s :=
          do {
            a <- runReader s x;
            runReader s (f a);
          }};
  };

import Mtl.Trait.Reader open;
import Mtl.Trait.Error open;
import Mtl.Trait.Error open using {module Error as MError};
import Mtl.Trait.Reader open using {module Reader as MReader};
import Stdlib.Data.Unit open;
import Stdlib.Function open;

instance
ReaderT-Reader
  {S : Type} {M : Type → Type} {{Monad M}} : Reader S (ReaderT S M) :=
  mkReader@{
    ask : ReaderT S M S := mkReaderT λ{s := Applicative.pure s};
  };

import Mtl.Trait.State open;
import Mtl.Data.StateT open;
import Mtl.Data.Identity open;
import Stdlib.Data.Pair open;

liftReaderT {R A : Type} {M : Type → Type} (m : M A) : ReaderT R M A :=
  mkReaderT (const m);

instance
ReaderT-MonadTransformer {R : Type} : MonadTransformer (ReaderT R) :=
  mkMonadTransformer@{
    lift {A : Type} {M : Type -> Type} {{Monad M}} (x : M A) : ReaderT R M A :=
      liftReaderT x;
  };

liftStateT
  {S A : Type} {M : Type → Type} {{Monad M}} (m : M A) : StateT S M A :=
  mkStateT
    λ{s :=
      do {
        a <- m;
        Applicative.pure (a, s);
      }};
