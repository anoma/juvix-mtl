module Mtl.Trait.State;

import Stdlib.Prelude open;

trait
type State (S : Type) (M : Type -> Type) :=
  mk@{
    state : {A : Type} -> (S -> Pair A S) -> M A;
  };

open State using {state} public;

get {S} {M : Type -> Type} {{Monad M}} {{State S M}} : M S :=
  state \{s := s, s};

put {S} {M : Type -> Type} {{Monad M}} {{State S M}} (s : S) : M Unit :=
  state \{_ := unit, s};

modify
  {S : Type} {M : Type → Type} {{Monad M}} {{State S M}} (f : S → S) : M Unit :=
  get >>= λ{s := put (f s)};
