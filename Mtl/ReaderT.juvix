module Mtl.ReaderT;

import Stdlib.Prelude open;
import Mtl.MonadTrans open;
import Mtl.MonadTrans open using {module MonadTrans as MMonadTrans};

type ReaderT (S : Type) (M : Type → Type) (A : Type) :=
  mkReaderT@{
    runReaderT : S → M A;
  };

runReader {S A : Type} {M : Type → Type} (r : S) (m : ReaderT S M A) : M A :=
  ReaderT.runReaderT m r;

instance
ReaderT-Functor
  {S : Type} {M : Type → Type} {{Functor M}} : Functor (ReaderT S M) :=
  mkFunctor@{
    map {A B : Type} (f : A → B) : ReaderT S M A → ReaderT S M B
      | (mkReaderT g) := mkReaderT λ{s := Functor.map λ{a := f a} (g s)};
  };

instance
ReaderT-Applicative
  {S : Type}
  {M : Type → Type}
  {{func : Applicative M}}
  : Applicative (ReaderT S M) :=
  mkApplicative@{
    pure {A} (a : A) : ReaderT S M A := mkReaderT \{s := Applicative.pure a};
    ap {A B} : ReaderT S M (A -> B) -> ReaderT S M A -> ReaderT S M B
      | (mkReaderT mf) (mkReaderT ma) :=
        mkReaderT \{s := Applicative.ap (mf s) (ma s)};
  };

instance
ReaderT-Monad
  {S : Type} {M : Type → Type} {{mon : Monad M}} : Monad (ReaderT S M) :=
  mkMonad@{
    applicative := ReaderT-Applicative;
    bind
      {A B : Type}
      (x : ReaderT S M A)
      (f : A → ReaderT S M B)
      : ReaderT S M B :=
      mkReaderT λ{s := Monad.bind (runReader s x) λ{a := runReader s (f a)}};
  };

import Mtl.MonadReader open;
import Mtl.MonadError open;
import Mtl.MonadError open using {module MonadError as MMonadError};
import Mtl.MonadReader open using {module MonadReader as MMonadReader};
import Stdlib.Data.Unit open;
import Stdlib.Function open;

instance
ReaderT-MonadReader
  {S : Type} {M : Type → Type} {{Monad M}} : MonadReader S (ReaderT S M) :=
  mkMonadReader@{
    monad := ReaderT-Monad;
    ask : ReaderT S M S := mkReaderT λ{s := Applicative.pure s};
    local {A : Type} (f : S → S) : ReaderT S M A -> ReaderT S M A
      | (mkReaderT l) := mkReaderT \{s := l (f s)};
  };

import Mtl.MonadState open;
import Mtl.StateT open;
import Mtl.Identity open;
import Stdlib.Data.Pair open;

liftReaderT {R A : Type} {M : Type → Type} (m : M A) : ReaderT R M A :=
  mkReaderT (const m);

instance
ReaderT-MonadTrans {R : Type} : MonadTrans (ReaderT R) :=
  mkMonadTrans@{
    lift {A : Type} {M : Type -> Type} {{Monad M}} (x : M A) : ReaderT R M A :=
      liftReaderT x;
  };

liftStateT
  {S A : Type} {M : Type → Type} {{Monad M}} (m : M A) : StateT S M A :=
  mkStateT λ{s := Monad.bind m λ{a := Applicative.pure (a, s)}};
